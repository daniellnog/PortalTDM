@using TDMWeb.Extensions
@using LaefazWeb.Enumerators
@model LaefazWeb.Models.TestData

@{
    ViewBag.Titulo = "Massa de teste";
}

@section styles {
    <style type="text/css">
        .form-control[readonly] {
            background-color: gainsboro;
            cursor: not-allowed;
        }

        .required:after {
            content: " *";
            color: #ff0000;
        }
    </style>
}
<link rel="stylesheet" href="~/Assets/Vendor/datepicker/css/bootstrap-datepicker.min.css">

@*form*@
@using (Html.BeginForm("SalvarEdicao", "TestData", FormMethod.Post, new { @id = "form-test-data", @class = "formLoading", enctype = "multipart/form-data" }))
{

    <input type="hidden" name="MAX_FILE_SIZE" value="314572800" />
    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">DataPool: @Model.DataPool.Descricao</h3>
        </div>

        <input type="hidden" id="arrayAlteracoesParametros" name="ParametrosEntrada" value="">
        <div class="box-body">
            @*@Html.HiddenFor(m => m.Descricao, new { Id = "hidden-descricao" })*@
            @Html.Hidden("hidden-descricao", @Model.Descricao)
            @*@Html.HiddenFor(m => m.Observacao, new { Id = "hidden-observacao" })*@
            @Html.Hidden("hidden-observacao", @Model.Observacao)
            @*@Html.HiddenFor(m => m.CasoTesteRelativo, new { Id = "hidden-caso-teste-relativo" })*@
            @Html.Hidden("hidden-caso-teste-relativo", @Model.CasoTesteRelativo)
            @Html.HiddenFor(m => m.IdDataPool, new { Id = "hidden-data-pool-id" })
            @*@Html.HiddenFor(m => m.GerarMigracao, new { Id = "hidden-gerar-migracao" })*@
            @Html.Hidden("hidden-gerar-migracao", @Model.GerarMigracao)
            @* @Html.HiddenFor(m => m.IdStatus, new { Id = "id-status" })*@
            @Html.HiddenFor(m => m.IdScript_CondicaoScript, new { Id = "hidden-id-script-condicao" })
            @*@Html.HiddenFor(m => m.GeradoPor, new { Id = "hidden-gerado-por" })*@
            @Html.HiddenFor(m => m.DataGeracao, new { Id = "hidden-dt-geracao" })
            @Html.HiddenFor(m => m.IdUsuario, new { Id = "hidden-id-usuario" })
            @Html.HiddenFor(m => m.Id, new { Id = "hidden-id" })

            @* @Html.HiddenFor(m => m.Script_CondicaoScript, new { Id = "hidden-id-condicaoscript" })*@



            <div class="row">
                @*campo decricao*@
                <div class="col-xs-4 form-group">
                    @Html.Label("Label-Descricao", "Descrição")
                    @Html.TextBoxFor(m => m.Descricao, new { @class = "form-control", required = "required", @id = "Descricao" })

                </div>
                <div class="col-xs-4 form-group">
                    @Html.Label("dtGeracaoSolicitadaText", "Data de Solicitação")
                    <div class="input-group date">
                        <div class="input-group-addon">
                            <i class="fa fa-calendar"></i>
                        </div>
                        @Html.TextBoxFor(m => m.DataPool.DataSolicitacao, "{0:dd/MM/yyyy}", new { @id = "dtGeracaoSolicitada", @class = "form-control pull-right", @required = "required", @disabled = true })
                    </div>

                </div>

                @*campo status*@
                <div class="col-xs-4 form-group">
                    @Html.HiddenFor(m => m.IdStatus, new { Id = "id-status" })
                    @Html.Label("status", "Status")
                    @Html.DropDownList("listStatus", new SelectList(ViewBag.listStatus, "Id", "Descricao"), null, new
               {
                   @class = "form-control",
                   @id = "list-status",
                   @style = "width: 100%; padding-right: 12px; padding-left: 12px; border-right-width: 1px;",
                   @required = "required",
                   @onchange = "AlteraStatus()",

               }
                        )
                </div>

            </div>
            @*campo migração de codigo*@
            <div class="row">
                <div class="col-xs-3 form-group">
                    @Html.Label("migracao", "Gerar antes de migração de código?")
                    @Html.DropDownList("listMigracao", new SelectList(ViewBag.listaChaveVO, "key", "value"), null, new
               {
                   @class = "form-control",
                   @id = "list-migracao-codigo",
                   @style = "width: 100%; padding-right: 12px; padding-left: 12px; border-right-width: 1px;",
                   @required = "required",

               }
               )

                </div>

                @*campo script*@
                <div class="col-xs-3 form-group">
                    @Html.Label("script", "Script")
                    @Html.DropDownList("listScript", new SelectList(ViewBag.listScript, "Id", "Descricao"), null, new
               {
                   @class = "form-control",
                   @id = "list-script",
                   @style = "width: 100%; padding-right: 12px; padding-left: 12px; border-right-width: 1px;",
                   @onchange = "SelectedIndexChanged()",
                   @required = "required",

               }
                        )
                </div>

                @*campo condicao script*@
                <div class="col-xs-3 form-group">
                    @Html.Label("script", "Condição")
                    @Html.DropDownList("listCondicaoScript", new SelectList(ViewBag.listCondicaoScript, "Id", "Descricao"), null, new
               {
                   @class = "form-control",
                   @id = "list-script-condicao",
                   @style = "width: 100%; padding-right: 12px; padding-left: 12px; border-right-width: 1px;",

               }
                    )
                </div>
                <div class="col-xs-3 form-group">
                    @Html.Label("tempo_estimado", "Tempo estimado (h:m)")
                    @Html.HiddenFor(m => m.TempoEstimadoExecucao, new { Id = "tempo_execucao" })
                    <input type="text" class="form-control pull-right timepicker" id="tempo-estimado">
                </div>
            </div>

            @*caso de teste relativo*@
            <div class="row">
                <div class="col-xs-3 form-group">
                    @Html.Label("CasoTesteRelativo", "Nº Caso de Teste")
                    @Html.TextBoxFor(m => m.CasoTesteRelativo, new { @class = "form-control", required = "required", @id = "CasoTesteRelativo" })
                </div>

                @*campo gerado por*@
                <div class="col-xs-3 form-group">
                    @Html.Label("lbl-gerado-por", "Gerado por")
                    @Html.TextBoxFor(m => m.GeradoPor, new { @id = "GeradoPor", @class = "form-control", @disabled = true })
                </div>

                @*campo data geracao*@
                <div class="col-xs-3 form-group">

                    @Html.Label("data-geracao", "Data de geração")
                    <div class="input-group date">
                        <div class="input-group-addon">
                            <i class="fa fa-calendar"></i>
                        </div>
                        @Html.TextBoxFor(m => m.DataGeracao, "{0:dd/MM/yyyy}", new { @id = "dtGeracao", @class = "form-control pull-right", @required = "required", @disabled = true })
                    </div>
                </div>

                @*campo Classificação da massa*@
                <div class="col-xs-3 form-group">
                    @Html.Label("classificacao", "Classificação da Massa")
                    @Html.DropDownListFor(m => m.ClassificacaoMassa, new SelectList(ViewBag.ListaClassificacao, "key", "value"), null, new
               {
                   @class = "form-control",
                   @id = "list-classificacao-massa",
                   @style = "width: 100%; padding-right: 12px; padding-left: 12px; border-right-width: 1px;",
                   @required = "required",

               }
                        )
                </div>
            </div>


            @*campo observação*@
            <div class="row">
                <div class="col-xs-12 form-group">
                    @Html.Label("LblObservacao", "Observação")
                    @Html.TextAreaFor(m => m.Observacao, new { @class = "form-control", @id = "Observacao", @style = "resize: none", @rows = "5" })
                </div>
            </div>
            <div class="box-footer" align="right">
                <a href="@Url.Action("Editar/"+Model.IdDataPool, "DataPool")" class="btn btn-danger" id="cancelar">Cancelar</a>
                <button type="submit" class="btn btn-primary" id="btnSalvar">Salvar</button>
            </div>
        </div>
    </div>

    <table id="POITable" name="NamePOITable" border="1" hidden="true">
        <tr>
            <th>Interação</th>
            <th>Campo</th>
            <th>Início</th>
            <th>Término</th>
            <th>Valor</th>
        </tr>
        <tr>
            <td><i class="srno"></i></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
    </table>

    <div class="box box-primary" id="box-parametros-entrada">
        <div class="box-header with-border">
            <h3 class="box-title">Parâmetros de Entrada</h3>
        </div>
        <div class="box-body" id="parametros-entrada">
        </div>
    </div>

    <div class="box box-primary" id="box-parametros-saida">
        <div class="box-header with-border">
            <h3 class="box-title">Parâmetros de Saída</h3>
        </div>
        <div class="box-body" id="parametros-saida">
        </div>
    </div>

}

@section scripts{


    <script type="text/javascript">
        $(document).ready(function () {;


            selecionaValorComboMigracao();
            selecionaValorComboScript();
            selecionaValorComboScriptCondicao();
            ativaDesativaCampos();
            selecionaValorComboStatus();
            loadFields();

            $('#POITable').on('change', 'select.search_type', function (e) {
                var selectedval = $(this).val();
                $(this).closest('td').next().html(selectedval);
            });

            onsubmitForm();

        });

        var tempoSelecionado = $('#tempo_execucao').val();
        tempoSelecionado = tempoSelecionado.substring(11, 16);

        var options = {
            now: tempoSelecionado, //hh:mm 24 hour format only, defaults to current time
            twentyFour: true, //Display 24 hour format, defaults to false
            upArrow: 'wickedpicker__controls__control-up', //The up arrow class selector to use, for custom CSS
            downArrow: 'wickedpicker__controls__control-down', //The down arrow class selector to use, for custom CSS
            close: 'wickedpicker__close', //The close class selector to use, for custom CSS
            hoverState: 'hover-state', //The hover state class to use, for custom CSS
            title: 'Tempo estimado de execução', //The Wickedpicker's title,
            showSeconds: false, //Whether or not to show seconds,
            secondsInterval: 1, //Change interval for seconds, defaults to 1  ,
            minutesInterval: 15, //Change interval for minutes, defaults to 1
            beforeShow: null, //A function to be called before the Wickedpicker is shown
            show: null, //A function to be called when the Wickedpicker is shown
            clearable: false, //Make the picker's input clearable (has clickable "x")
        };

        $('#tempo-estimado').wickedpicker(options);

        //$(function () {


        //    //Date picker
        //    $('#dtGeracaoSolicitada').datepicker({
        //        autoclose: true
        //    })

        //})
        function SelectedIndexChanged() {

            $.ajax(
       {
           url: '@Url.Action("carregaCondicaoScript", "TestData")',
           type: 'POST',
           data: "{id:" + $("#list-script").val() + "}",
           contentType: 'application/json; charset=utf-8',
           success: function (result) {
               var json = $.parseJSON(result);
               $("#list-script-condicao").empty();

               if (JSON.stringify(json) === '{}') {
                   $("#list-script-condicao").attr("disabled", true);
                   $("#list-script-condicao").append
                      ($('<option></option>').val(0).html("N/A"))
                   $("#list-script-condicao").removeAttr("required");

               } else {

                   $.each(json, function (id, descricao) {
                       $("#list-script-condicao").append
                       ($('<option></option>').val(id).html(descricao))
                   })
                   $("#list-script-condicao").attr("required", true);
                   $("#list-script-condicao").removeAttr("disabled");
               }

           },
           error: function (erro) {
               alert(erro);
           }
       });
        }

        function selecionaValorComboMigracao() {
            var id = $("#hidden-gerar-migracao").attr("value");

            if (id == "False") {
                id = 0;
            } else {
                id = 1;
            }


            var $option = $('#list-migracao-codigo').children('option[value="' + id + '"]');

            $option.attr('selected', true);
        }


        function selecionaValorComboScript() {
            var id = $("#hidden-id-script").attr("value");

            var $option = $('#list-script').children('option[value="' + id + '"]');

            $option.attr('selected', true);
        }

        function selecionaValorComboScriptCondicao() {
            var id = $("#hidden-id-script-condicao").attr("value");

            if (id != "") {

                $('#list-script-condicao').removeAttr("disabled");
                $('#list-script-condicao').attr("required", true);
                var $option = $('#list-script-condicao').children('option[value="' + id + '"]');
                $option.attr('selected', true);
            } else {
                $('#list-script-condicao').removeAttr("required");
                $("#list-script-condicao").attr("disabled", true);
                $("#list-script-condicao").append
                   ($('<option></option>').val(0).html("N/A"))

            }




        }

        function selecionaValorComboStatus() {
            var id = $("#id-status").attr("value");
            var $option = $('#list-status').children('option[value="' + id + '"]');
            $option.attr('selected', true);

            if (id == 3 || id == 5) {
                $('#list-status').removeAttr("disabled");
            } else {
                $('#list-status').attr("disabled", true);
            }

        }



        function ativaDesativaCampos() {
            var id = parseInt($("#id-status").attr("value"));

            if (id != 1) {
                $('#Descricao').attr("disabled", true);
                $('#list-status').attr("disabled", true);
                $('#list-migracao-codigo').attr("disabled", true);
                $('#list-script').attr("disabled", true);
                $('#list-script-condicao').attr("disabled", true);
                $('#CasoTesteRelativo').attr("disabled", true);
                $('#Observacao').attr("disabled", true);
                $('#list-classificacao-massa').attr("disabled", true);

                if (id == 6 || id == 4)
                    $('#btnSalvar').attr("disabled", true);


            } else {
                $('#Descricao').removeAttr("disabled");
                $('#list-status').removeAttr("disabled");
                $('#list-migracao-codigo').removeAttr("disabled");
                $('#CasoTesteRelativo').removeAttr("disabled");
                $('#Observacao').removeAttr("disabled");
                $('#list-script').attr("disabled", true);
                $('#list-script-condicao').attr("disabled", true);
                $('#list-classificacao-massa').removeAttr("disabled");
            }
        }


        function AlteraStatus() {
            var idAnterior = $("#id-status").val();
            var idStatus = $("#list-status option:selected").val();
            var btnNao = false;
            //$('#list-script').focus().select();
            $('#list-status').blur();
            if (idStatus == 6) {
                $.MessageBoxSimNao({
                    titulo: "Utilizar massa?",
                    mensagem: "Confirma a utilização da massa?",
                    height: "auto",
                    width: "auto",
                    funcaoBotaoNao: function () {
                        // $('#list-script').focus();
                        // var $option = $('#list-script').children('option[value="' + idAnterior + '"]');
                        // $option.attr('selected', true);

                        //$('#list-status').focus().select();

                        //$('#listStatus').val(idAnterior);
                        //$('#listStatus').show();
                        //$("#listStatus").selectmenu('refresh');
                        $('#list-status').val(idAnterior).attr("selected", "selected");

                    }

                });
            }
        }

        function AddZero(num) {
            return (num >= 0 && num < 10) ? "0" + num : num + "";
        }

        function Alterou(y, campo) {
            var campoAlterado = document.getElementById(campo.id);

            var now = new Date();
            var strDateTime = [[AddZero(now.getDate()),
                AddZero(now.getMonth() + 1),
                now.getFullYear()].join("/"),
                [AddZero(now.getHours()),
                AddZero(now.getMinutes()),
                AddZero(now.getSeconds())].join(":"),
                now.getHours() >= 12 ? "PM" : "AM"].join(" ");

            if (y == 1) {
                //document.getElementById("tempoInicio").value = "Tempo Início: " + strDateTime;
                insRow($(campo).attr("idvalor"), campo, strDateTime, "")
            }
            if (y == 2) {
                //document.getElementById("tempoFim").value = "Tempo Fim: " + strDateTime;
                insRow($(campo).attr("idvalor"), campo, "", strDateTime)
            }
        }
        var len = 1;
        var stringAlteracoesParams = "";
        var array = new Array();
        function insRow(campoId, campo, dataInicio, dataTermino) {
            var chave = len;

            if (len % 2 == 0) {
                chave = len - 1;
            }

            var ps = $(campo).attr("idparametroscript");
            var obj = { chave: chave, incremento: len, idCampo: campoId, inicio: dataInicio, termino: dataTermino, valor: campo.value, idParamScript: ps };
            //stringAlteracoesParams += len + ',' + campoId + ',' + dataInicio + ',' + dataTermino + ',' + campo.value + '|';
            array.push(obj);
            len++;

        }

        function loadFields() {


            $.ajax({
                url: '@Url.Action("CarregarParametroValor", "TestData")',
                type: 'POST',
                data: "{idScriptCondicaoScript:" + @Model.IdScript_CondicaoScript + ", idTestData:" +@Model.Id +"}",
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    var obj = JSON.parse(result);
                    var input = "";
                    var linhaSaida = "";
                    var linhaEntrada = "";
                    var contSaida = 1;
                    var contEntrada = 1;
                    var total = obj.length;
                    var totalEntrada = 0;
                    var totalSaida = 0;
                    var divParametro;
                    var contParametroEntrada = false;
                    var contParametroSaida = false;


                    obj.forEach(function (o, index) {
                        if (o.IdTipoParametro == 2) {
                            totalSaida++;
                            contParametroSaida = true;

                        } else {
                            totalEntrada++;
                            contParametroEntrada = true;
                        }
                    });

                    var camposEntrada = [];
                    var camposSaida = [];
                    var readOnly = "";
                    var asteristico = "";


                    if ($("#list-status").val() != 1) {
                        readOnly = "readonly";
                    }

                    obj.forEach(function (o, index) {

                        if (o.Obrigatorio == true) {
                            asteristico = "required";
                        } else {
                            asteristico = "";
                        }

                        switch (o.Tipo) {
                            case "NUMBER":
                                input = "<div class=\"col-xs-4 form-group\"><label class=" + asteristico + ">" + o.Descricao + "</label><input onfocus='Alterou(1, this)' onblur='Alterou(2, this)' " + readOnly + " IdParametroScript=" + o.IdParametroScript + " idValor=" + o.Id + " tipo=\"parametro\" name=\"" + o.Descricao + "\" type=\"text\" onkeypress=\"if (!isNaN(String.fromCharCode(window.event.keyCode))) return true; else return false;\" value=\"" + o.Valor + "\" class=\"form-control\" id=\"" + o.Descricao + "\"  " + (o.IdTipoParametro == 1 ? "" : "readonly") + " /></div>";
                                break;
                            case "DATE":
                                input = "<div class=\"col-xs-4 form-group\"><label class=" + asteristico + ">" + o.Descricao + "</label><div onfocus='Alterou(1, this)' onblur='Alterou(2, this)' class=\"input-group date\"><div class=\"input-group-addon\"><i class=\"fa fa-calendar\"></i></div><input  " + readOnly + "  IdParametroScript=" + o.IdParametroScript + " idValor=" + o.Id + " tipo=\"parametro\" name=\"" + o.Descricao + "\" class=\"form-control pull-right\" data-val=\"true\" data-val-date=\"The field DataSolicitacao must be a date.\" data-val-required=\"The DataSolicitacao field is required.\" name=\"DataSolicitacao\" " + (o.IdTipoParametro == 1 ? "" : "readonly") + " type=\"text\" data-mask=\"00/00/0000\" id=\"data-parametro\" value=\"" + o.Valor + "\" aria-required=\"true\"  aria-invalid=\"false\"></div></div>";
                                break;
                            default:
                                input = "<div class=\"col-xs-4 form-group\"><label class=" + asteristico + ">" + o.Descricao + "</label><input onfocus='Alterou(1, this)' onblur='Alterou(2, this)' " + readOnly + "  IdParametroScript=" + o.IdParametroScript + " idValor=" + o.Id + " tipo=\"parametro\" name=\"" + o.Descricao + "\" type=\"text\" value=\"" + o.Valor + "\" class=\"form-control\" id=\"" + o.Descricao + "\" " + (o.IdTipoParametro == 1 ? "" : "readonly") + " /></div>";
                                break;
                        }

                        if (o.IdTipoParametro == 1) {
                            camposEntrada.push(input);
                        } else {
                            camposSaida.push(input);
                        }
                    });

                    //adicionando parâmetros de entrada
                    if (camposEntrada.length > 0) {
                        var divParametroEntrada = $("#parametros-entrada");
                        var ultimaPosicao = 0;
                        var qtdLinhaExtra = camposEntrada.length < 3 ? 0 : Math.round(camposEntrada.length % 3);
                        var qtdLinha = camposEntrada.length < 3 ? 1 : Math.round(camposEntrada.length / 3);


                        for (var i = 0; i < qtdLinha; i++) {
                            var campos = [];
                            for (var j = 0; j < 3; j++) {
                                if (camposEntrada[ultimaPosicao] != undefined) {
                                    campos[j] = camposEntrada[ultimaPosicao];
                                    ultimaPosicao++;
                                } else {
                                    break;
                                }
                            }
                            var linha = addLinha(campos);
                            divParametroEntrada.append(linha);
                        }

                        if (camposEntrada.length > 3) {
                            for (var i = 0; i < qtdLinhaExtra; i++) {
                                var campos = [];
                                for (var j = 0; j < 3; j++) {
                                    if (camposEntrada[ultimaPosicao] != undefined) {
                                        campos[j] = camposEntrada[ultimaPosicao];
                                        ultimaPosicao++;
                                    } else {
                                        break;
                                    }
                                }
                                var linha = addLinha(campos);
                                divParametroEntrada.append(linha);
                            }
                        }


                    } else {
                        $("#box-parametros-entrada").toggle();
                    }

                    //adicionando parâmetros de saida
                    if (camposSaida.length > 0) {
                        var div = $("#parametros-saida");
                        var ultimaPosicao = 0;
                        var qtdLinhaExtra = camposSaida.length < 3 ? 0 : Math.round(camposSaida.length % 3);
                        var qtdLinha = camposSaida.length < 3 ? 1 : Math.round(camposSaida.length / 3);


                        for (var i = 0; i < qtdLinha; i++) {
                            var campos = [];
                            for (var j = 0; j < 3; j++) {
                                if (camposSaida[ultimaPosicao] != undefined) {
                                    campos[j] = camposSaida[ultimaPosicao];
                                    ultimaPosicao++;
                                } else {
                                    break;
                                }

                            }
                            var linha = addLinha(campos);
                            div.append(linha);
                        }

                        if (camposSaida.length > 3) {
                            for (var i = 0; i < qtdLinhaExtra; i++) {
                                var campos = [];
                                for (var j = 0; j < 3; j++) {
                                    if (camposSaida[ultimaPosicao] != undefined) {
                                        campos[j] = camposSaida[ultimaPosicao];
                                        ultimaPosicao++;
                                    } else {
                                        break;
                                    }

                                }
                                var linha = addLinha(campos);
                                div.append(linha);
                            }
                        }


                    } else {
                        $("#box-parametros-saida").toggle();
                    }


                }
            });
        }


        function addLinha(campos) {
            var iniLinha = "<div class=\"row\">";
            var linha = "";
            var fimLinha = "</div>";
            for (var i = 0; i < campos.length; i++) {
                linha += campos[i];
            }

            return iniLinha + linha + fimLinha;
        }

        function onsubmitForm() {
            $("#form-test-data").submit(function (event) {

                if ($("#form-test-data").valid()) {
                    $("#list-status").removeAttr("disabled");
                }

                //stringAlteracoesParams.substr(0, stringAlteracoesParams.length - 1);

                var alteracoes = JSON.stringify(array);

                $('#arrayAlteracoesParametros').val(alteracoes);

                $("<input/>", { type: 'hidden', name: 'tempoEstimado' }).val($('#tempo-estimado').val()).appendTo("form");
            });
        }



    </script>

}
