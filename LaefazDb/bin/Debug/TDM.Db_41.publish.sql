/*
Deployment script for TDM.Db_2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TDM.Db_2"
:setvar DefaultFilePrefix "TDM.Db_2"
:setvar DefaultDataPath "c:\Program Files\Microsoft SQL Server\MSSQL10.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "c:\Program Files\Microsoft SQL Server\MSSQL10.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [dbo].[FK_ParametroValor_ParametroValor]...';


GO
ALTER TABLE [dbo].[ParametroValor] DROP CONSTRAINT [FK_ParametroValor_ParametroValor];


GO
PRINT N'Dropping [dbo].[FK_ParametroValor_TestData]...';


GO
ALTER TABLE [dbo].[ParametroValor] DROP CONSTRAINT [FK_ParametroValor_TestData];


GO
PRINT N'Dropping [dbo].[FK_ParametroValor_ParametroScript]...';


GO
ALTER TABLE [dbo].[ParametroValor] DROP CONSTRAINT [FK_ParametroValor_ParametroScript];


GO
PRINT N'Starting rebuilding table [dbo].[ParametroValor]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ParametroValor] (
    [Id]                      INT            IDENTITY (1, 1) NOT NULL,
    [IdTestData]              INT            NOT NULL,
    [IdParametroScript]       INT            NOT NULL,
    [IdParametroValor_Origem] INT            NULL,
    [Valor]                   VARCHAR (5000) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[ParametroValor])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ParametroValor] ON;
        INSERT INTO [dbo].[tmp_ms_xx_ParametroValor] ([Id], [IdTestData], [IdParametroScript], [Valor], [IdParametroValor_Origem])
        SELECT   [Id],
                 [IdTestData],
                 [IdParametroScript],
                 [Valor],
                 [IdParametroValor_Origem]
        FROM     [dbo].[ParametroValor]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ParametroValor] OFF;
    END

DROP TABLE [dbo].[ParametroValor];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ParametroValor]', N'ParametroValor';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[FK_ParametroValor_ParametroValor]...';


GO
ALTER TABLE [dbo].[ParametroValor] WITH NOCHECK
    ADD CONSTRAINT [FK_ParametroValor_ParametroValor] FOREIGN KEY ([IdParametroValor_Origem]) REFERENCES [dbo].[ParametroValor] ([Id]);


GO
PRINT N'Creating [dbo].[FK_ParametroValor_TestData]...';


GO
ALTER TABLE [dbo].[ParametroValor] WITH NOCHECK
    ADD CONSTRAINT [FK_ParametroValor_TestData] FOREIGN KEY ([IdTestData]) REFERENCES [dbo].[TestData] ([Id]);


GO
PRINT N'Creating [dbo].[FK_ParametroValor_ParametroScript]...';


GO
ALTER TABLE [dbo].[ParametroValor] WITH NOCHECK
    ADD CONSTRAINT [FK_ParametroValor_ParametroScript] FOREIGN KEY ([IdParametroScript]) REFERENCES [dbo].[ParametroScript] ([Id]);


GO
PRINT N'Altering [dbo].[PR_LISTAR_PARAMETRO_TESTDATA]...';


GO
ALTER PROCEDURE PR_LISTAR_PARAMETRO_TESTDATA
	   @DISPLAYLENGTH INT,
	   @DISPLAYSTART INT,
	   @SORTCOL INT,
	   @SORTDIR NVARCHAR(10),
	   @SEARCH NVARCHAR(255) = NULL,
	   @LISTARTODOS INT = 1,
	   @IDENCADEAMENTO INT = NULL,
	   @IDTESTDATA INT = NULL
AS
BEGIN
	   DECLARE @FIRSTREC INT, @LASTREC INT
	   SET @FIRSTREC = @DISPLAYSTART;
	   SET @LASTREC = @DISPLAYSTART + @DISPLAYLENGTH;
	   
	   With CTE_ParametroTestData as
	   (
			  SELECT DISTINCT
					 ROW_NUMBER() over 
					 (
						   order by
								  -- COLUNA DESCRIÇÃO DO TESTDATA --
								  case when (@SortCol = 0 and @SortDir='asc') then td.Descricao end asc,
								  case when (@SortCol = 0 and @SortDir='desc') then td.Descricao end desc,
						   
								  -- COLUNA DESCRIÇÃO DO PARAMETRO --
								  case when (@SortCol = 1 and @SortDir='asc') then p.Descricao end asc,
								  case when (@SortCol = 1 and @SortDir='desc') then p.Descricao end desc,
									 
								  -- COLUNA DESCRICAO DO TIPO DE PARAMETRO --
								  case when (@SortCol = 2 and @SortDir='asc') then tp.Descricao end asc,
								  case when (@SortCol = 2 and @SortDir='desc') then tp.Descricao end desc,
									 
								  -- COLUNA DO VALOR DO PARAMETRO --
								  case when (@SortCol = 4 and @SortDir='asc') then pv.Valor end asc,
								  case when (@SortCol = 4 and @SortDir='desc') then pv.Valor end desc   
					 ) as RowNum,

					 COUNT(*) over() as TotalCount,
					 td.Id IdTestData,
					 td.Descricao DescricaoTestData,
					 ps.IdParametro,
					 p.Descricao DescricaoParametro,
					 ps.IdTipoParametro IdTipoParametro,
					 tp.Descricao DescricaoTipoParametro,
					 pv.IdParametroValor_Origem,
					 pv.Valor,
					 pv.Id Id  
			  FROM 
					 TestData td
					 INNER JOIN ParametroValor pv on td.Id =pv.IdTestData
					 INNER JOIN Encadeamento_TestData encadTd on td.Id = encadTd.IdTestData
					 INNER JOIN DataPool dtp on td.IdDataPool = dtp.Id
					 INNER JOIN ParametroScript ps on pv.IdParametroScript = ps.Id
					 INNER JOIN Parametro p on ps.IdParametro = p.Id
					 INNER JOIN TipoParametro tp on ps.IdTipoParametro = tp.Id
					 --INNER JOIN TipoDadoParametro tdp on ps.IdTipoParametro = tdp.Id
			  WHERE 
			  (
						(encadTd.IdEncadeamento = @IDENCADEAMENTO OR @IDENCADEAMENTO IS NULL)
					AND (td.Id = @IDTESTDATA OR @IDTESTDATA IS NULL)
					AND (
						   @SEARCH IS NULL 
						   OR td.Descricao like '%' + @Search + '%'
						   OR pv.Valor like '%' + @Search + '%'
						   OR p.Descricao like '%' + @Search + '%'
						   OR tp.Descricao like '%' + @Search + '%'
						)
			  )
	   )
	   
	   Select * from CTE_ParametroTestData where @ListarTodos = 1 OR (@ListarTodos  = 0 AND RowNum > @FirstRec and RowNum <= @LastRec)
END
GO
PRINT N'Altering [dbo].[PR_LISTAR_DATAPOOL]...';


GO
ALTER PROCEDURE PR_LISTAR_DATAPOOL
       @DISPLAYLENGTH INT,
       @DISPLAYSTART INT,
       @SORTCOL INT,
       @SORTDIR NVARCHAR(10),
       @SEARCH NVARCHAR(255) = NULL,
       @LISTARTODOS INT = 1,
       @IDUSUARIO INT,
       @IDTDM NVARCHAR(255) = NULL
AS
BEGIN
       DECLARE @FIRSTREC INT, @LASTREC INT
       SET @FIRSTREC = @DISPLAYSTART;
       SET @LASTREC = @DISPLAYSTART + @DISPLAYLENGTH;

       With CTE_DataPool as
       (
              SELECT 
                     ROW_NUMBER() over 
                     (
                           order by
                                  -- COLUNA DESCRIÇÃO DO TDM --
                                  case when (@SortCol = 0 and @SortDir='asc') then TDM.Descricao end asc,
                                  case when (@SortCol = 0 and @SortDir='desc') then TDM.Descricao end desc,
                           
                                  -- COLUNA DESCRIÇÃO DA DEMANDA --
                                  case when (@SortCol = 1 and @SortDir='asc') then Demanda.Descricao end asc,
                                  case when (@SortCol = 1 and @SortDir='desc') then Demanda.Descricao end desc,
                                  
                                  -- COLUNA DESCRIÇÃO DO SISTEMA --
                                  case when (@SortCol = 2 and @SortDir='asc') then AUT.Descricao end asc,
                                  case when (@SortCol = 2 and @SortDir='desc') then AUT.Descricao end desc,
                                  
                                  -- COLUNA DESCRIÇÃO DO SCRIPT --
                                  case when (@SortCol = 3 and @SortDir='asc') then ISNULL(Script.Descricao,'') + ' ' + ISNULL(CondicaoScript.Descricao,'') end asc,
                                  case when (@SortCol = 3 and @SortDir='desc') then ISNULL(Script.Descricao,'') + ' ' + ISNULL(CondicaoScript.Descricao,'') end desc,
                                  
                                  -- COLUNA QTD CADASTRADA --
                                  case when (@SortCol = 4 and @SortDir='asc') then (SELECT CAST(COUNT(TestData.IdStatus) AS INT) FROM TestData WHERE TestData.IdDataPool = DataPool.Id AND TestData.IdStatus=1) end asc,
                                  case when (@SortCol = 4 and @SortDir='desc') then (SELECT CAST(COUNT(TestData.IdStatus) AS INT) FROM TestData WHERE TestData.IdDataPool = DataPool.Id AND TestData.IdStatus=1) end desc,
                                  
                                  -- COLUNA QTD SOLICITADA --
                                  case when (@SortCol = 5 and @SortDir='asc') then DataPool.QtdSolicitada end asc,
                                  case when (@SortCol = 5 and @SortDir='desc') then DataPool.QtdSolicitada end desc,
                                  
                                  -- COLUNA QTD DISPONÍVEL --
                                  case when (@SortCol = 6 and @SortDir='asc') then (SELECT CAST(COUNT(TestData.IdStatus) AS INT) FROM TestData WHERE TestData.IdDataPool = DataPool.Id AND TestData.IdStatus=3) end asc,
                                  case when (@SortCol = 6 and @SortDir='desc') then (SELECT CAST(COUNT(TestData.IdStatus) AS INT) FROM TestData WHERE TestData.IdDataPool = DataPool.Id AND TestData.IdStatus=3) end desc,
                                  
                                  -- COLUNA QTD RESERVADA --
                                  case when (@SortCol = 7 and @SortDir='asc') then (SELECT CAST(COUNT(TestData.IdStatus) AS INT) FROM TestData WHERE TestData.IdDataPool = DataPool.Id AND TestData.IdStatus=5) end asc,
                                  case when (@SortCol = 7 and @SortDir='desc') then (SELECT CAST(COUNT(TestData.IdStatus) AS INT) FROM TestData WHERE TestData.IdDataPool = DataPool.Id AND TestData.IdStatus=5) end desc,
                                  
                                  -- COLUNA QTD UTILIZADA --
                                  case when (@SortCol = 8 and @SortDir='asc') then (SELECT CAST(COUNT(TestData.IdStatus) AS INT) FROM TestData WHERE TestData.IdDataPool = DataPool.Id AND TestData.IdStatus=6) end asc,
                                  case when (@SortCol = 8 and @SortDir='desc') then (SELECT CAST(COUNT(TestData.IdStatus) AS INT) FROM TestData WHERE TestData.IdDataPool = DataPool.Id AND TestData.IdStatus=6) end desc
                                  
                                  --case when (@SortCol = 7 and @SortDir='asc') then Farol end asc,
                                  --case when (@SortCol = 7 and @SortDir='desc') then Farol end desc,
                                  
                                  --case when (@SortCol = 8 and @SortDir='asc') then DataPool.Descricao end asc,
                                  --case when (@SortCol = 8 and @SortDir='desc') then DataPool.Descricao end desc
                     ) as RowNum,

                     COUNT(*) over() as TotalCount,
                     DataPool.Id,
                     DataPool.Descricao DescricaoDataPool,
                     DataPool.DataTermino DataTermino,
                     Demanda.Descricao DescricaoDemanda,
                     AUT.Descricao DescricaoSistema,
                     'Tipo' TipoMassa,
                     (SELECT CAST(COUNT(TestData.IdStatus) AS INT)FROM TestData WHERE TestData.IdDataPool = DataPool.Id AND TestData.IdStatus=1) QtdCadastrada,
                     DataPool.QtdSolicitada,
                     (SELECT CAST(COUNT(TestData.IdStatus) AS INT)FROM TestData WHERE TestData.IdDataPool = DataPool.Id AND TestData.IdStatus=3) QtdDisponivel,
                     (SELECT CAST(COUNT(TestData.IdStatus) AS INT)FROM TestData WHERE TestData.IdDataPool = DataPool.Id AND TestData.IdStatus=5) QtdReservada,
                     (SELECT CAST(COUNT(TestData.IdStatus) AS INT)FROM TestData WHERE TestData.IdDataPool = DataPool.Id AND TestData.IdStatus=6) QtdUtilizada,
                     0 Farol,
                     DataPool.DataSolicitacao,
                     CondicaoScript.Id IdCondicaoScript,
                     Script.Id IdScript,
                     TDM.Descricao DescricaoTDM,
                     ISNULL(Script.Descricao,'') + ' ' + ISNULL(CondicaoScript.Descricao,'') as DescricaoCondicaoScript    
              FROM 
                     DataPool
                     LEFT JOIN Demanda ON Demanda.Id = DataPool.IdDemanda
                     LEFT JOIN AUT ON AUT.Id = DataPool.IdAut
                     LEFT JOIN Script_CondicaoScript ON Script_CondicaoScript.Id = DataPool.IdScript_CondicaoScript
                     LEFT JOIN Script ON Script.Id = Script_CondicaoScript.IdScript
                     LEFT JOIN CondicaoScript ON CondicaoScript.Id = Script_CondicaoScript.IdCondicaoScript
                     LEFT JOIN TDM ON TDM.Id = DataPool.IdTDM
                     LEFT JOIN TDM_Usuario ON TDM_Usuario.IdTDM = TDM.Id
              WHERE 
              (
                     (DataPool.IdTDM = @IDTDM OR @IDTDM IS NULL) AND
                     (
                           @SEARCH IS NULL 
                           OR DataPool.Descricao like '%' + @Search + '%'
                           OR Demanda.Descricao like '%' + @Search + '%'
                           OR AUT.Descricao like '%' + @Search + '%'
                           OR DataPool.QtdSolicitada like '%' + @Search + '%'
                     )AND
                     (TDM_Usuario.IdUsuario = @IDUSUARIO)
              )
       )
       
       Select * from CTE_DataPool where @ListarTodos = 1 OR (@ListarTodos  = 0 AND RowNum > @FirstRec and RowNum <= @LastRec)
END
GO
PRINT N'Altering [dbo].[PR_LISTAR_ENCADEAMENTO]...';


GO
ALTER PROCEDURE PR_LISTAR_ENCADEAMENTO
	@IPVDI NVARCHAR(255),
	@IDSTATUSEXECUCAO NVARCHAR(255) = 1
AS
BEGIN
	--
	SELECT DISTINCT
		en.IdEncadeamento as IdEncadeamento
	FROM 
		Execucao ex
		INNER JOIN Script_CondicaoScript_Ambiente sca ON sca.Id = ex.IdScript_CondicaoScript_Ambiente
		INNER JOIN AmbienteVirtual av ON av.Id = sca.IdAmbienteVirtual
		INNER JOIN Script_CondicaoScript scs ON scs.Id = sca.IdScript_CondicaoScript
		INNER JOIN TestData td ON td.Id = ex.IdTestData
		LEFT JOIN Encadeamento_TestData en ON en.IdTestData = td.Id
	WHERE 
			(av.IP = @IPVDI OR @IPVDI IS NULL)
		AND	(ex.IdStatusExecucao = @IDSTATUSEXECUCAO)
	--
END
GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '20fa0dc2-c195-4469-ae09-6455f7b679a3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('20fa0dc2-c195-4469-ae09-6455f7b679a3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e3126f2e-363b-409f-975b-a4f6fe9d9c86')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e3126f2e-363b-409f-975b-a4f6fe9d9c86')

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[ParametroValor] WITH CHECK CHECK CONSTRAINT [FK_ParametroValor_ParametroValor];

ALTER TABLE [dbo].[ParametroValor] WITH CHECK CHECK CONSTRAINT [FK_ParametroValor_TestData];

ALTER TABLE [dbo].[ParametroValor] WITH CHECK CHECK CONSTRAINT [FK_ParametroValor_ParametroScript];


GO
PRINT N'Update complete.';


GO
